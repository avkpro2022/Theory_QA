1.Клиентн-серверная архитектура.

Клиент-сервесная архитектура - 
вычислительная или сетевая архитектра, 
которая состоит из двух компонентов: клиента и сервера.

Клиент - это программное обеспечение, которое производит запросы. Клиенты 
подразделяются на web-приложения и desktop-ные приложения. К 
web-приложениям относится: браузер, всеразличные web-приложения для 
социальных сетей (VK, Facebook и др.). К desktop-ным приложениям относятся 
те, которые устанавливаются непосредственно на компьютер или телефон.

Также, используют термин тонкий клиент (thin klient) - это 
клиент(приложение), которое 
большую часть информации и ее обработки хранит на сервере. Например, 
web-приожение или P2P-клиенты. В противовес тонкому клиенту, выделят - 
толстый клиент (heavy-klient, rich-kleint) - приложение,которые все 
вычислительные операции проводит самостоятельно, независимо от сервера, а 
на сервере хранит только информацию.  

Сервер - это физический носитель с специально разработанной программой, 
который отвечает на запросы клиента и хранит удаленно информацию от 
клиента. Сервер может быть двухуровневый и многоуровневый. Двухуровневый 
состоит исключительно из клиента и сервера, а многоуровневый может 
дополнительно включать несколько серверов (используется, когда за короткий 
промежуток времени необходимо обработать множество запросов) и базу 
данных, которая хранит информацию для клиента.

Преимущества клиент-серверной архитектуры:
1) не рребуется небольшая мощность компьютеров на которых установлен 
клиент;
2) отсутсвие необходимости дублировать код и информацию на несколько 
компьютеров, выполняющих роль клиента;
3) сервер может содержать больше информации и более надежно защищен.

Недостатки:
1) высокая стоимость оборудования;
2) необходимость администратора для поддержания работоспособности сервера;
3) зависимсть работы клиента от сервера (при неработоспособности сервера, 
клиент не способен получать ответ на запрос).

2. HTTP и HTTPS
 
HTTP (HyperText transfer protocol) - протокол передачи гипертекста) и 
HTTPS (HyperText transfer protocol secure) - это протокол (т.е. набор 
правил) между клиентом и 
сервером, посредством которого происходит передача информации. HTTPS 
отличается от HTTP тем, что имеет систему шифрования,в от личие от HTTP, 
которая вообще не имеет возможности шифровать и передавать данные 
конфеденциально. HTTPS не является отдельным протоколом, а всего лишь 
разновидностью HTTP, который содержит возможность криптографического 
метода шифрования. Протоколы используются для получения информации с 
web-сервисов.

HTTPS используется на сайтах, где необходимо передавать личные данные 
пользователя (ФИО, номер банковской карточки и др.). Один из вариантов 
криптографического шифрования - SSL (помимо последнего существует TLS). 
Также, данные протоколы используют 
разные порты: HTTP - 80, а HTTPS - 443.

3. Методы HTTP

Выделяют следующие основные методы: GET, POST, PUT, DELET, connect.

GET - запрос, который содержить тектовую информацию.
HEAD - запрос, аналогичный GET, но без тела ответа.
POST - запрос, который передает информацию пользователя (клиента)..
PUT - запрос на сохранение информации.
DELET - запрос на удаление ресурса.
connect - устанавливает "туннель" к определенному ресурсу.
PATCH - используется для частичного исменения ресурса. То есть аналогичный 
PUT, но применяется только к части ресурса.
TRANCE - возвращает полученный запрос так, что клиент может видеть, какую 
информацию изменяют или добавляют промежуточные сервера.

4. HTTP статус коды сервера

Статус кода сервера на запрос показывает состояние информации или запроса. 
Выделяют пять категорий статус кода:
1хх - информационный
2хх - успешный запрос
3хх - перенаправления запроса
4хх - ошибка клиента
5хх - ошибка сервера.

5. Ядро браузера

Ядро браузера - это программа, которая преобразует информацию 
Web-страницы в интерактивное изображение форматируемого содержимого на 
экране.
 
Браузер = оболочка + ядро. Оболочка - это внешний интерфейс с которым 
взаимодействует пользователь. Ядро - это программа или модуль, который 
отображает информацию на основе языка разметки. Ядро состоит из двух 
компонентов: движок рендеринга (то есть графическое отображение) и движок 
JS. JS отвечает за интерпритацию, компиляцию JavaScript, чтобы достигнуть 
динамического эффекта браузера.

Классификация ядер:

1) Trident (используется с 1997 г., открытый исходный код, пример - 
Internet Explorer);

2) Gecko - ядро с полностью открытым исходным кодом, поэтому можно 
дописывать функционал. Используется в MozillaFireFox.

3) Presto - ядро используемое в браузере Opera. Ныне является устаревшим. 
Разрабатывалось на коммеческой основе. Его преимущество было в 
быстроисполняемых графических скриптах в сравнении с Gecko и Trident.

4) WebKit - ядро браузера с открытым исходным кодом. Используется в 
браузере Safari. В последнее время получил распространения за счет 
безопасности и возможности установки на  OS Windows.

5) Blink - ядро браузера на основе WebKit. Используется в GoogleChrome 
(после 28 серии), Opera (после 15 серии), Microsoft Edge (с 79 серии) и 
Яндекс.



